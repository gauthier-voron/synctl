#!/bin/bash
#
#   mktree - create a file hierarchy with specific properties
#
#   Create a file hierarchy including directories, regular files and symbolic
#   links with specified paths, permissions, access and modification times,
#   contents and optionaly xattrs.
#   For convenience, the specification format is the same than for chktree:
#
#       path mode atime mtime [options] [suffix]
#
#       path:    path of the entry staring from the hierarchy root
#       mode:    octal mode of the entry with optional wildcard permission
#       atime:   access time in the fomat YYYYMMDD or wildcard
#       mtime:   modification time in the fomat YYYYMMDD or wildcard
#       options: optional additional attributes
#       suffix:  mode dependant content specifier
#
#   Examples of entry:
#
#        permission access time
#              vvvv vvvvvvvv
#       root 040755 19700101 19700101
#       ^^^^ ^^              ^^^^^^^^
#       path directory       modification time
#
#
#   wildcard permission  atime     regular file content suffix
#                  vvvv vvvvvvvv   vvvvvvvvvvv
#       root/f0 010**** 20190403 * < content\n
#       ^^^^^^^ ^^^              ^
#       path    regular file     wildcard modification time
#
#
#    wildcard atime & mtime  optional xattr
#                       v v vvvvvvvvvvvvvvvvv
#       root/l0 0120777 * * x:user.name=value = f0
#       ^^^^^^^ ^^^^^^^                       ^^^^
#       path    symbolic link                 symbolic link target suffix
#

set -e

get_type() {
    local mode="$1" ; shift
    local ftype ntype

    ftype=${mode:0:-4}

    ntype=${ftype##0}
    while [ "x$ntype" != "x$ftype" ] ; do
	ftype=$ntype
	ntype=${ftype##0}
    done

    echo $ftype
}

get_perm() {
    local mode="$1" ; shift
    local perm="${mode: -4}"

    echo "$perm"
}

get_suffix() {
    local rem="$1" ; shift

    while [ "x$rem" != 'x' ] ; do
	read -r opt rem <<< "$rem"
	if [ "x$opt" = 'x=' -o "x$opt" = 'x<' ] ; then
	    echo "$opt" "$rem"
	    return
	fi
    done
}

do_xattr() {
    local path="$1" ; shift
    local opt="$1" ; shift
    local name="${opt%%=*}"
    local value="${opt#*=}"

    test "x$name" != 'x'

    setfattr -h -n "$name" -v "$value" "$path"
}

do_options() {
    local path="$1" ; shift
    local rem="$1" ; shift

    while [ "x$rem" != 'x' ] ; do
	read -r opt rem <<< "$rem"
	if [ "x$opt" = 'x=' -o "x$opt" = 'x<' ] ; then
	    return
	fi

	if [ "x${opt:0:2}" = 'xx:' ] ; then
	    do_xattr "$path" "${opt:2}"
	else
	    false
	fi
    done
}

create_dir() {
    local path="$1" ; shift
    local rem="$1" ; shift

    test "x$(get_suffix "$rem")" = 'x'

    mkdir "$path"

    do_options "$path" "$rem"
}

create_regular() {
    local path="$1" ; shift
    local rem="$1" ; shift
    local symbol content

    read -r symbol content <<< "$(get_suffix "$rem")"

    case $symbol in
	'<') printf "$content" > "$path" ;;
	'=') ln "${prefix}${content}" "$path" ;;
	'')  touch "$path" ;;
	*)   false ;;
    esac

    do_options "$path" "$rem"
}

create_symlink() {
    local path="$1" ; shift
    local rem="$1" ; shift
    local symbol target

    read -r symbol target <<< "$(get_suffix "$rem")"

    case $symbol in
	'=') ln -s "$target" "$path" ;;
	*)   false ;;
    esac

    do_options "$path" "$rem"
}

prefix=

while [ $# -gt 0 ] ; do
    case "$1" in
	'-p') shift; prefix="$1" ;;
	'--') shift; break ;;
    esac
    shift
done

if [ "x$prefix" != 'x' ] ; then
    if [ ! -d "$prefix" ] ; then
	mkdir "$prefix"
    fi
    if [ "${prefix: -1}" != '/' ] ; then
	prefix="$prefix/"
    fi
fi

perms=$(mktemp -t --suffix='.sh' 'mktree.XXXXXXXXXX')
trap "rm '$perms'" 'EXIT'

while read -r path mode atime mtime rem ; do
    path="${prefix}${path}"
    ftype=$(get_type $mode)
    perm="$(get_perm $mode)"

    case $ftype in
	4)  create_dir     "$path" "$rem" ;;
	10) create_regular "$path" "$rem" ;;
	12) create_symlink "$path" "$rem" ;;
	*)  false ;;
    esac

    if [ "$mtime" != '*' ] ; then
	echo "touch -m -h -t ${mtime}0000 '$path'" >> "$perms"
    fi

    if [ "$atime" != '*' ] ; then
	echo "touch -a -h -t ${atime}0000 '$path'" >> "$perms"
    fi

    if [ $ftype -ne 12 -a "$perm" != '****' ] ; then
	echo "chmod $perm '$path'" >> "$perms"
    fi
done

tac "$perms" | bash
rm "$perms"
trap - 'EXIT'
